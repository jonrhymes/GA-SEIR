{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/jonrhymes/Desktop/General_Assembly/djangohw/test_frontend/pages/details.js\";\nvar __jsx = React.createElement;\nimport Layout from '../components/Layout';\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch'; // export default function Details (props) {\n//     return (\n//         <Layout>\n//             <h1>Skill Details</h1>\n//         </Layout>\n//     )\n// }\n\nexport default function Details(props) {\n  var skills = props.skills;\n  var skill_level;\n\n  switch (skills.skill_level) {\n    case 1:\n      skill_level = \"Fundamental Awareness\";\n      break;\n\n    case 2:\n      skill_level = \"Novice\";\n      break;\n\n    case 3:\n      skill_level = \"Intermediate\";\n      break;\n\n    case 4:\n      skill_level = \"Advanced\";\n      break;\n\n    case 5:\n      skill_level = \"Expert\";\n\n    case 6:\n      skill_level = \"Code Wizard!\";\n  }\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, skills.description), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \"Skill level: \", skills.skill_level));\n} // // pages/posts/[id].js\n//\n// function Details() {\n//   // Render post...\n// }\n//\n// // This function gets called at build time\n// export async function getStaticPaths() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch('http://127.0.0.1:8000/api/v1/skill/')\n//   const data = await res.json()\n//\n//   // Get the paths we want to pre-render based on posts\n//   const paths = data.map((data) => ({\n//     params: { id: post.id },\n//   }))\n//\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false }\n// }\n//\n// // This also gets called at build time\n// export async function getStaticProps({ params }) {\n//   // params contains the post `id`.\n//   // If the route is like /posts/1, then params.id is 1\n//   const res = await fetch(`http://127.0.0.1:8000/api/v1/skill/${params.id}`)\n//   const data = await res.json()\n//\n//   // Pass post data to the page via props\n//   return { props: { data } }\n// }\n//\n// export default Details\n\n_c = Details;\n\nDetails.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var query, res, data, skills;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref.query;\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch(\"http://127.0.0.1:8000/api/v1/skill/\");\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            data = _context.sent;\n            skills = data.objects.find(function (skills) {\n              return skills.id === parseInt(query.id);\n            });\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(_context.t0);\n\n          case 14:\n            return _context.abrupt(\"return\", {\n              skills: skills\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 11]]);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // export default Details;\n\n\nvar _c;\n\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"sources":["/Users/jonrhymes/Desktop/General_Assembly/djangohw/test_frontend/pages/details.js"],"names":["Layout","React","fetch","Details","props","skills","skill_level","description","getInitialProps","query","res","json","data","objects","find","id","parseInt","console","error"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,OAAT,CAAkBC,KAAlB,EAAyB;AAAA,MAC7BC,MAD6B,GACnBD,KADmB,CAC7BC,MAD6B;AAEpC,MAAIC,WAAJ;;AACA,UAAQD,MAAM,CAACC,WAAf;AACI,SAAK,CAAL;AACIA,MAAAA,WAAW,GAAG,uBAAd;AACA;;AACJ,SAAK,CAAL;AACIA,MAAAA,WAAW,GAAG,QAAd;AACA;;AACJ,SAAK,CAAL;AACIA,MAAAA,WAAW,GAAG,cAAd;AACA;;AACJ,SAAK,CAAL;AACIA,MAAAA,WAAW,GAAG,UAAd;AACA;;AACJ,SAAK,CAAL;AACIA,MAAAA,WAAW,GAAG,QAAd;;AACJ,SAAK,CAAL;AACIA,MAAAA,WAAW,GAAG,cAAd;AAhBR;;AAkBA,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,MAAM,CAACE,WAAZ,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAiBF,MAAM,CAACC,WAAxB,CAFJ,CADJ;AAMH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;KA9DwBH,O;;AAiExBA,OAAO,CAACK,eAAR;AAAA,uEAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,YAAAA,KAAR,QAAQA,KAAR;AAAA;AAAA;AAAA,mBAGNP,KAAK,uCAHC;;AAAA;AAGlBQ,YAAAA,GAHkB;AAAA;AAAA,mBAILA,GAAG,CAACC,IAAJ,EAJK;;AAAA;AAIlBC,YAAAA,IAJkB;AAKlBP,YAAAA,MAAM,GAAGO,IAAI,CAACC,OAAL,CAAaC,IAAb,CAAkB,UAACT,MAAD;AAAA,qBAAYA,MAAM,CAACU,EAAP,KAAcC,QAAQ,CAACP,KAAK,CAACM,EAAP,CAAlC;AAAA,aAAlB,CAAT;AALkB;AAAA;;AAAA;AAAA;AAAA;AAOlBE,YAAAA,OAAO,CAACC,KAAR;;AAPkB;AAAA,6CASf;AACHb,cAAAA,MAAM,EAANA;AADG,aATe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA,I,CAcA","sourcesContent":["import Layout from '../components/Layout';\nimport React from 'react'\nimport fetch from 'isomorphic-unfetch';\n\n// export default function Details (props) {\n//     return (\n//         <Layout>\n//             <h1>Skill Details</h1>\n//         </Layout>\n//     )\n// }\n\nexport default function Details (props) {\n    const {skills} = props;\n    let skill_level;\n    switch (skills.skill_level) {\n        case 1:\n            skill_level = \"Fundamental Awareness\";\n            break;\n        case 2:\n            skill_level = \"Novice\";\n            break;\n        case 3:\n            skill_level = \"Intermediate\";\n            break;\n        case 4:\n            skill_level = \"Advanced\"\n            break;\n        case 5:\n            skill_level = \"Expert\"\n        case 6:\n            skill_level = \"Code Wizard!\"\n    }\n    return (\n        <Layout>\n            <h1>{skills.description}</h1>\n            <p>Skill level: {skills.skill_level}</p>\n        </Layout>\n    )\n}\n\n// // pages/posts/[id].js\n//\n// function Details() {\n//   // Render post...\n// }\n//\n// // This function gets called at build time\n// export async function getStaticPaths() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch('http://127.0.0.1:8000/api/v1/skill/')\n//   const data = await res.json()\n//\n//   // Get the paths we want to pre-render based on posts\n//   const paths = data.map((data) => ({\n//     params: { id: post.id },\n//   }))\n//\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false }\n// }\n//\n// // This also gets called at build time\n// export async function getStaticProps({ params }) {\n//   // params contains the post `id`.\n//   // If the route is like /posts/1, then params.id is 1\n//   const res = await fetch(`http://127.0.0.1:8000/api/v1/skill/${params.id}`)\n//   const data = await res.json()\n//\n//   // Pass post data to the page via props\n//   return { props: { data } }\n// }\n//\n// export default Details\n\n\nDetails.getInitialProps = async ({query}) => {\n    let res, data, skills;\n    try {\n        res = await fetch(`http://127.0.0.1:8000/api/v1/skill/`)\n        data = await res.json();\n        skills = data.objects.find((skills) => skills.id === parseInt(query.id));\n    } catch(error){\n        console.error(error);\n    }\n    return {\n        skills\n    }\n};\n\n// export default Details;"]},"metadata":{},"sourceType":"module"}